#!/usr/bin/env bash
# suricatamon - readable live view of Suricata eve.json
# Colours alerts from local.rules, ET/Open rules, and SURICATA engine rules
# Save as /usr/local/bin/suricatamon && chmod +x /usr/local/bin/suricatamon

set -euo pipefail

LOG="${SURICATA_EVE:-/var/log/suricata/eve.json}"

if [[ ! -r "$LOG" ]]; then
  echo "Cannot read $LOG" >&2
  exit 2
fi

# Hints:
#   SURICATAMON_SHOW_SID=1   -> append [gid:sid:rev]
#   SURICATAMON_WIDE=1       -> include proto, sport/dport, app_proto
SHOW_SID="${SURICATAMON_SHOW_SID:-0}"
WIDE="${SURICATAMON_WIDE:-0}"

export SHOW_SID WIDE

stdbuf -oL -eL tail -F "$LOG" | jq -r '
  # ---------- helpers ----------
  def ts:        (.timestamp | sub("T"; " ") | sub("\\+.*$"; ""));
  def red(s):    "\u001b[31m" + s + "\u001b[0m";
  def yellow(s): "\u001b[33m" + s + "\u001b[0m";
  def blue(s):   "\u001b[34m" + s + "\u001b[0m";
  def green(s):  "\u001b[32m" + s + "\u001b[0m";
  def mag(s):    "\u001b[95m" + s + "\u001b[0m";
  def teal(s):   "\u001b[96m" + s + "\u001b[0m";
  def gray(s):   "\u001b[90m" + s + "\u001b[0m";
  def ipport(ip;port): ( (ip // "-") + ":" + ((port // 0)|tostring) );

  # ---------- colour mapping for alerts (generic, no hardcoded rule texts) ----------
  def colorize_alert($sig; $cat; $class; $sev; $sid; $gid):
    # Source tag by SID/GID/engine
    ( if ($sig | startswith("SURICATA ")) then "[ENGINE]"
      elif ($sid|type=="number" and $sid>=2000000 and $sid<3000000) then "[ET]"
      elif ($sid|type=="number" and $sid>=100000 and $sid<2000000) then "[LOCAL]"
      else "[RULE]" end ) as $src

    # Severity-based base color
    | ( if $sev == 1 then "sev_red"
        elif $sev == 2 then "sev_mag"
        elif $sev == 3 then "sev_yel"
        elif $sev == 4 then "sev_teal"
        else "sev_gray" end ) as $sevcol

    # Text/category/classtype heuristics to bump severity colour
    | ( ($sig // "") + " " + ($cat // "") + " " + ($class // "") ) as $blob
    | ( if ($blob | test("(?i)NMAP|RECON|SCAN|XMAS|NULL scan|SYN scan")) then "crit_red"
        elif ($blob | test("(?i)EXPLOIT|CVE-|LFI|RFI|RCE|SQLI|XSS|DESERIAL|XXE|CMD INJ")) then "crit_red"
        elif ($blob | test("(?i)MALWARE|TROJAN|BOTNET|C2|BEACON|RANSOM|BACKDOOR|COBALT|SLIVER|MYTHIC|EMPIRE")) then "crit_mag"
        elif ($blob | test("(?i)POLICY|HUNTING")) then "warn_yel"
        elif ($blob | test("(?i)INFO\\b|Potential|Suspected")) then "info_teal"
        elif ($class | test("(?i)attempted-admin|attempted-user|attempted-recon")) then "warn_yel"
        else $sevcol end ) as $final

    # Apply colour
    | ( if $final == "crit_red" then red($src + " " + $sig)
        elif $final == "crit_mag" then mag($src + " " + $sig)
        elif $final == "warn_yel" then yellow($src + " " + $sig)
        elif $final == "info_teal" then teal($src + " " + $sig)
        elif $final == "sev_red" then red($src + " " + $sig)
        elif $final == "sev_mag" then mag($src + " " + $sig)
        elif $final == "sev_yel" then yellow($src + " " + $sig)
        elif $final == "sev_teal" then teal($src + " " + $sig)
        else gray($src + " " + $sig) end );

  # ---------- events ----------
  if .event_type == "flow" then
    ts + " " +
    (if .flow.action == "drop" then red("[FLOW]") else blue("[FLOW]") end) + " " +
    ipport(.src_ip; .src_port) + " \u2192 " + ipport(.dest_ip; .dest_port) +
    " proto=" + (.proto // "-") + " action=" +
    (if .flow.action == "drop" then red(.flow.action) else blue(.flow.action) end)

  elif .event_type == "dns" and .dns and .dns.type == "answer" then
    (.dns.rrname // "-") as $name
    | (($name | test("\\.onion$"; "i"))) as $is_onion
    | ts + " " +
      (if $is_onion then mag("[DNS .onion]") else green("[DNS]") end) + " " +
      (.src_ip // "-") + " \u2192 " +
      (if $is_onion then mag($name) else $name end) + " = " +
      (
        (
          ((.dns.answers // []) | map(.rdata // empty)) +
          ((.dns.grouped.CNAME // []) | map(.))
        )
        | unique
        | if length > 0 then join(", ") else "-" end
      )

  elif .event_type == "tls" and .tls then
    ts + " " + mag("[TLS]") + " " +
    ipport(.src_ip; .src_port) + " \u2192 " + ipport(.dest_ip; .dest_port) +
    " SNI=" + (.tls.sni // "-") + " ver=" + (.tls.version // "-")

  elif .event_type == "http" and .http then
    ts + " " + teal("[HTTP]") + " " +
    (.src_ip // "-") + " \u2192 " + (.http.hostname // "-") +
    (.http.url // "") +
    (if env.WIDE == "1" then " ua=" + (.http.http_user_agent // "-") else "" end)

  elif .event_type == "drop" and .drop then
    ts + " " + red("[DROP]") + " " +
    (.src_ip // "-") + " \u2192 " + (.dest_ip // "-") +
    " proto=" + (.proto // "-") + " reason=" + (.drop.reason // "-")

  elif .event_type == "alert" and .alert then
    # Extract key fields robustly
    (.alert.signature // "-") as $sig
    | (.alert.category // (.alert.signature // "-")) as $cat
    | (.alert.severity // 3) as $sev
    | (.alert.gid // 1) as $gid
    | (.alert.signature_id // .alert.sig_id // 0) as $sid
    | (.alert.rev // 1) as $rev
    | (.alert.classtype // "") as $class

    # Normalize “ROGUE AP][DNS]” -> “ROGUE DNS][DNS]” as per your previous preference
    | ($sig | sub("^\\[ROGUE AP\\]\\[DNS\\]"; "[ROGUE DNS][DNS]")) as $sig2

    # Colourised head
    | colorize_alert($sig2; $cat; $class; $sev; $sid; $gid) as $head

    # Compose line
    | ts + " " + yellow("[ALERT]") + " " + $head +
      " src=" + (.src_ip // "-") + " dst=" + (.dest_ip // "-") +
      (if env.SHOW_SID == "1" then " [" + ($gid|tostring) + ":" + ($sid|tostring) + ":" + ($rev|tostring) + "]" else "" end) +
      (if env.WIDE == "1"
        then " proto=" + (.proto // "-") +
             (if .src_port? then " sport=" + ((.src_port // 0)|tostring) else "" end) +
             (if .dest_port? then " dport=" + ((.dest_port // 0)|tostring) else "" end) +
             (if .app_proto? then " app=" + (.app_proto // "-") else "" end)
        else "" end)

  else empty end
'
